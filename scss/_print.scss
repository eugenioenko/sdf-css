/**
 * Print
 */
 $print-colors: (
     default: (
         background: transparent,
         contrast:   #000,
         font:       #000
     ),
     primary: (
         background: transparent,
         contrast:   #000,
         font:       #000

     ),
     secondary: (
         background: transparent,
         contrast:   #000,
         font:       #000
     ),
     warning: (
         background: transparent,
         contrast:   #000,
         font:       #000
     ),
     info: (
         background: transparent,
         contrast:   #000,
         font:       #000
     ),
     success: (
         background: transparent,
         contrast:   #000,
         font:       #000
     ),
     danger: (
         background: transparent,
         contrast:   #000,
         font:       #000

     ),
     light: (
         background: transparent,
         contrast:   #000,
         font:       #000
     ),
     dark: (
         background: transparent,
         contrast:   #000,
         font:       #000
     )
 );

 @function print-get($theme, $type){
   @return map-get(map-get($print-colors, $theme), $type);
 }

@media print{
    // color themes from $color-types variable
     @each $color in $color-types{
        .sdf-#{$color}{
            background-color: print-get($color, background);
            color: print-get($color, contrast);
            &.sdf-hover, &.sdf-btn:hover, &.sdf-btn:focus{
                background-color: darken(saturate(print-get($color, background), $color-multiplier*3), $color-multiplier);
            }
        }
        .sdf-#{$color}-inverse{
            background-color: print-get($color, contrast);
            color: print-get($color, background);
        }
        .sdf-#{$color}-font{
            color: print-get($color, font);
        }
    }

    .sdf-glow{
        box-shadow: 0 2px 2px 0 rgba(255,255,255,.15), 0 3px 1px -2px rgba(255,255,255,.2), 0 1px 5px 0 rgba(255,255,255,.1);
    }
    @each $color in $color-types{
        .sdf-#{$color}{
            //make theme modifier when button is the same as block theme
            .sdf-btn.sdf-#{$color}{
                background-color: darken(print-get($color, background), $color-multiplier);
                &.sdf-hover, &.sdf-btn:hover, &.sdf-btn:focus{
                    background-color: print-get($color, contrast);
                    color: print-get($color, background);
                }
            }
            .sdf-btn.sdf-btn-outline.sdf-#{$color}{
                border: 1px solid print-get($color, contrast);
                color: print-get($color, contrast);
            }
            // make theme modifier when input is inside color block
            .sdf-input{
                background-color: print-get($color, background);
                color: print-get($color, contrast);
                &:focus{
                    @if $color == dark {
                        border-color: print-get(primary, background);
                    } @else if $color == light {
                        border-color: print-get(primary, background);
                    } @else if $color == default {
                        border-color: print-get(primary, background);
                    } @else {
                        border-color: complement(print-get($color, background));
                    }
                }
                &.sdf-input-outline-2p:focus,
                &.sdf-input-outline-3p:focus,
                &.sdf-input-outline-4p:focus{
                    @if $color == dark {
                        outline-color: rgba(print-get(primary, background), 0.5);
                    } @else if $color == light {
                        outline-color: rgba(print-get(primary, background), 0.5);
                    } @else if $color == default {
                        outline-color: rgba(print-get(primary, background), 0.5);
                    } @else {
                        outline-color: rgba(complement(print-get($color, background)), 0.5);
                    }   
                }
            }
            // make theme modifier when input addon is inside color block
            .sdf-input-addon, .sdf-input{
                border-color: rgba(print-get($color, contrast), $border-color-opacity);
            }
            // glow color
            .sdf-glow{
                box-shadow: 0 2px 2px 0 rgba(print-get($color, contrast),.15), 0 3px 1px -2px rgba(print-get($color, contrast),.2), 0 1px 5px 0 rgba(print-get($color, contrast),.1);
            }
        }
    }


    // outline buttons
    .sdf-btn{
        &.sdf-btn-outline{
            @each $color in $color-types{
                &.sdf-#{$color}{
                    background-color: transparent;
                    border: 1px solid print-get($color, background);
                    color: print-get($color, background);
                    &:hover, &:active, &:focus{
                        background-color: print-get($color, background);
                        border: 1px solid print-get($color, background);
                        color: print-get($color, contrast);
                    }
                }
                &.sdf-#{$color}-inverse{
                    background-color: transparent;
                    border: 1px solid print-get($color, contrast);
                    color: print-get($color, contrast);
                }
            }
        }
    }

    .sdf-shadow{
        box-shadow: 0 2px 2px 0 rgba(0,0,0,.14), 0 3px 1px -2px rgba(0,0,0,.2), 0 1px 5px 0 rgba(0,0,0,.12);
    }

    .sdf-dark{
        .sdf-shadow{
            box-shadow: 0 2px 2px 0 rgba(255,255,255,.14), 0 3px 1px -2px rgba(255,255,255,.2), 0 1px 5px 0 rgba(255,255,255,.12);
        }
    }
}