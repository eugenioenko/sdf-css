/**
 * SDF grid
 */
@mixin make-grid(){
    @include sdf-flex();
    @include sdf-flex-flow-row-wrap();
    @include sdf-vertical-stretch();
    box-sizing: border-box;
}

.sdf-grid{
    @include make-grid();
    margin: 0;
    &.sdf-fixed{
        margin: 0 auto;
        // generating fixed grid sizes
        @each $breakpoint in $grid{
            @if map-get($breakpoint, width) != null {
                @media (min-width: map-get($breakpoint, media)){
                    width: map-get($breakpoint, width);
                }
            }
        }
    }
}

.sdf-cell{
    position: relative;
    padding-left: $grid-gutter/2;
    padding-right: $grid-gutter/2;
}
.sdf-cell>.sdf-grid, .sdf-col>.sdf-grid{
    margin-left: -$grid-gutter/2;
    margin-right: -$grid-gutter/2;
}
.sdf-cell.sdf-grid{
    padding-left: 0;
    padding-right: 0;
    @include sdf-content-start();
}
.sdf-grid.sdf-no-gutter>.sdf-cell{
    padding-left: 0;
    padding-right: 0;
}

@mixin container(){
    display: block;
    padding-left:  ($grid-gutter / 2);
    padding-right: ($grid-gutter / 2);
    @include sdf-clearfix();
}

@mixin make-row() {
    margin-left:  ($grid-gutter / -2);
    margin-right: ($grid-gutter / -2);
    @include sdf-clearfix();
}

@mixin make-col(){
    float: left;
    display: block;
    position: relative;
    min-height: 1px;
    padding-left:  ($grid-gutter / 2);
    padding-right: ($grid-gutter / 2);
}

.sdf-container{
    width: 100%;
    @include container();
}
.sdf-container-fixed{
    @include container();
    margin-left: auto;
    margin-right: auto;
    @each $breakpoint in $grid{
        @if map-get($breakpoint, width) != null {
            @media (min-width: map-get($breakpoint, width)){
                width: map-get($breakpoint, width);
            }
        }
    }
}
.sdf-row{
    @include make-row();
}
.sdf-col{
    @include make-col();
}
.sdf-df-auto{
    flex: 1 1 $auto-min-width;
}
@media (max-width: $media-max-df){
    .sdf-auto{
        width: 100%;
    }
}
@media (min-width: $media-min-xs){
    .sdf-auto{
        flex: 1 1 $auto-min-width;
    }
}

@mixin  grid-media($type, $cols-count){
    @if $type != null {
        .sdf-#{$type}-auto{
            flex: 1 1 $auto-min-width;
        }
    }
    @for $i from 1 through $cols-count {
        @if $type == null {
            .sdf-#{$i}{
                width: #{percentage($i / $cols-count)};
            }
            .sdf-offset-#{$i}{
                margin-left: #{percentage($i / $cols-count)};
            }
        } @else {
            .sdf-#{$type}-#{$i}{
                width: #{percentage($i / $cols-count)};
            }
            .sdf-offset-#{$type}-#{$i}{
                margin-left: #{percentage($i / $cols-count)};
            }
        }
    }
}

// generates default cell sizes;
@include grid-media(null, $grid-cols);
// generates all the cell sizes for each breakpoint (except default)
@each $breakpoint in $grid{
    @media (min-width: map-get($breakpoint, media)){
        @include grid-media(map-get($breakpoint, prefix), map-get($breakpoint, cols));
    }
}
