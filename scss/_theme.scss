/**
 * Theme
 */
// color themes from $color-types variable
 @each $color in $color-types{
    .std-#{$color}{
        background-color: color-get($color, background);
        color: color-get($color, contrast);
        &.std-hover, &.std-btn:hover, &.std-btn:focus{
        	background-color: darken(saturate(color-get($color, background), $color-multiplier), $color-multiplier);
        }
    }
    .std-#{$color}-inverse{
        background-color: color-get($color, contrast);
        color: color-get($color, background);
    }
    .std-#{$color}-font{
    	color: color-get($color, font);
    }
}

//make theme modifier when button is the same as block theme
@each $color in $color-types{
	.std-#{$color}{
		.std-btn.std-#{$color}{
			background-color: darken(color-get($color, background), $color-multiplier);
			 &.std-hover, &.std-btn:hover, &.std-btn:focus{
        		background-color: color-get($color, contrast);
        		color: color-get($color, background);
        	}
		}
		.std-btn.std-btn-outline.std-#{$color}{
			border: 1px solid color-get($color, contrast);
			color: color-get($color, contrast);
		}
	}

}

// outline buttons
.std-btn{
	&.std-btn-outline{
		@each $color in $color-types{
			&.std-#{$color}{
				background-color: transparent;
				border: 1px solid color-get($color, background);
				color: color-get($color, background);
				&:hover, &:active{
					background-color: color-get($color, background);
					border: 1px solid color-get($color, background);
					color: color-get($color, contrast);
				}
			}
			&.std-#{$color}-inverse{
				background-color: transparent;
				border: 1px solid color-get($color, contrast);
				color: color-get($color, contrast);
			}
		}
	}
}

.std-shadow{
	box-shadow: 0 2px 2px 0 rgba(0,0,0,.14), 0 3px 1px -2px rgba(0,0,0,.2), 0 1px 5px 0 rgba(0,0,0,.12);
}
.std-dark{
	.std-shadow{
		box-shadow: 0 2px 2px 0 rgba(255,255,255,.14), 0 3px 1px -2px rgba(255,255,255,.2), 0 1px 5px 0 rgba(255,255,255,.12);
	}
}